import java_cup.runtime.*;
import javax.swing.*;
import java.util.*;

%%
/*- Secci贸n de opciones y declaraciones -*/
/*-OPCIONES --*/
/* Nombre de la clase generada para el analizador lexico */
%class conversor
/* Indicar funcionamiento autonomo*/
%standalone
%8bit
/* Acceso a la columna y fila actual de analisis CUP */
%line
%column
/* Habilitar la compatibilidad con el interfaz CUP para el generador sintactico*/
%cup
/*-- DECLARACIONES --*/
%{/*Crear un nuevo objeto java_cup.runtime.Symbol con informaci贸n sobre el token actual sin valor*/
  private Symbol symbol(int type){
    return new Symbol(type,yyline,yycolumn);
  }
/* Crear un nuevo objeto java_cup.runtime.Symbol con informaci贸n sobre el token actual con valor*/
  private Symbol symbol(int type,Object value){
    return new Symbol(type,yyline,yycolumn,value);
  }
%}
/*-- MACRO DECLARACIONES --*/
LineTerminator = \r|\n|\r\n
WhiteSpace     = {LineTerminator} | [ \t\f]
//finConversion	= [,;]
num_int = [0-9]+
%%
/*-------- Secci贸n de reglas lexicas ------ */
<YYINITIAL> {
//{finConversion}{ return symbol.FCONVERSION}
","	    { return symbol(sym.COMA);}
";"     { return  symbol(sym.PUNTOCOMA);}
"mm"	  { return  symbol(sym.MM); }
"cm"	  { return  symbol(sym.CM); }
"dm"	  { return  symbol(sym.DCM); }
"m"     { return  symbol(sym.M); }
"Dm"	  { return  symbol(sym.DCAM); }
"Hm"	  { return  symbol(sym.HM); }
"Km"	  { return  symbol(sym.KM); }
{num_int}	      { return symbol(sym.NUMBER, new Integer(yytext())); }
{WhiteSpace}	{ }
. {System.out.println("token ilegal <" + yytext()+ "> linea: " + (yyline+1) + " columna: | " + (yycolumn+1));
  interfaz.rotular("token ilegal <" + yytext()+ "> linea: " + (yyline+1) + " columna: | " + (yycolumn+1));
}
}